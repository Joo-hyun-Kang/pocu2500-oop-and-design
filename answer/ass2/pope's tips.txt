[강사] 포프
  9:00 AM
이번 과제를 보고 '허걱'하시는 분들이 있을 수도 있는데... 잘 생각하면 생각보다 만들어야 할 것은 적습니다.
참고로 말씀드리면 이 비슷한 일을 실제 실무에서 한 일이 있습니다. 그때는 제품 종류가 11000개인가 그랬어요. 그걸 어떻게 잘 클래스로 표현하느냐가 관건이었죠.(워낙 출력하는 제품이 다양하고 주먹구구식으로 진행하던 인쇄업체하고 스펙 잡던 고통...)
여기서 한 가지 힌트를 드리자면 그 클래스를 사용(구현이 아님)하는 사람의 입장에서 상식적인 방법이 뭐냐를 찾아야 하는 겁니다.
좀 더 구체적으로 말씀드리면 다음과 같은 결정을 하셔야 하는 거죠.
1. 어떤 데이터를 어떤 type으로 표현하는 게 맞는지 (여기서 type에는 여러분이 만드는 클래스도 포함)
2. 어떤 데이터가 별도의 클래스가 되어야 하는지 아니면 다른 클래스의 멤버 변수로 들어가야 하는지
3. 기타 등등
파이팅입니다! :muscle::slightly_smiling_face:

[강사] 포프
  9:00 AM
혹시 다형성(polymorphism)을 사용 못해서 갑갑하신가요? 사실 다형성을 사용하면 이 과제가 더 쉬워지긴 합니다. :crying_cat_face:
하.지.만...
과제 2는 순수하게 상속만으로 문제를 해결해야 한답니다. 그 이유는...
1. 진도 상 아직 다형성을 배우지 않았음 (이건 그리 중요한 이유는 아님)
2. OOP를 배울 때 상속과 다형성은 확실히 분리해서 배워야 함 (상속은 다양한 물체들의 데이터를 쳬계적/계층적으로 분류하는 법, 다형성은 상속을 통해 체계적인 계층 구조가 잡혔는데 완전히 일치하지 않는 동작들이 있을 때 그에 조금씩 변형을 주는 방법)
특히 2번 같은 경우를 제대로 안 해 놓으면 상속으로 해결할 수 있는 문제를 다형성으로 해결하려다 이런저런 문제(예: 성능, 툭하면 상속 구조를 뒤집어야 함)를 만드는 일들이 생기죠. 기술면접에서 OOP 관련 질문에 제대로 답을 못해서 점수를 까먹기도 하고요.
뭐든 간에 상속과 다형성은 확실히 분리해서 배워야 한다는 게 저희 믿음이니 한번 상속만으로 이 문제를 풀어보세요.
참고로 과제 3부터는 다형성이 허용되니 설계(매우 주관적, 삽질하다 지침 :sweat:) 관련 채점 기준이 많이 완화됩니다! :dancers:


Junseok Seo
  3 months ago
포프님 혹시 말씀해주신 다형성으로 해결하려다 생기는 문제의 구체적인 예시 몇개만 소개해주실 수 있으신가요? 조금더 찾아보고 싶은데 제가 검색할 키워드가 생각나지 않아서 여쭤보고 싶었습니다!


[강사] 포프
  2 months ago
대표적인게 lab6에서 price getter가 아닐까요?


[강사] 포프
  2 months ago
부모에서 price 멤버변수를 가지고 있으면 부모 클래스의 getter 함수를 호출하는 것만으로 답을 가져올 수 있습니다. 이 경우에 함수를  final로 선언하면 실행중에 실제 함수를 찾으려고 포인터 연산을 한번 더 할 필요가 없죠


[강사] 포프
  2 months ago
하지만 getPrice()란 함수를 다형성으로 각 자식마다 만들 경우에는 ... 실행중에 그 함수를 찾아야하기 때문에 시간이 더 듭니다.


[강사] 포프
  2 months ago
그 외에 이번 과제에서 Red Blue Green 스탬프를 각자의 클래스로 만드시는 분들도 있었는데 이걸 다시 STamp란 클래스 하나로 합치란 이유하고도 비슷합니다.
동작이 달라지지 않고 데이터만 달라지는 부분은 한 클래스의 속성으로 처리해야 하는데.. 이걸 다른 클래스로 나누고 함수를 더하다보면 어느순간 실제 다형적이지 않은데 다형적으로 처리하는 상황들이 오거든요.
그러다가 갑자기 여기에 RedCalendar를 더하고 다형적으로 무언갈 잘못처리할 위험도 있습니다. (실제 stamp인데 모든게 다형적으로 돌다보니 calendar를 자식으로 더해도 잘 작동함)
그러다가 나중에 spec이 바뀌어서 stamp에 공통된 무언가를 부모클래스에 더하다 보면... RedCalendar는 더이상 해당 사항이 없어서 또 다른 다형적 함수를 추가해야한다던가 그제서야 이걸 새로운 상속구조로 분리해야하는 상황이 나죠.
:heart:
1



[강사] 포프
  2 months ago
따라서 다형성을 배우기 전에 상속구조는 확실히 익히고 가는게 좋습니다 :slightly_smiling_face:


Junseok Seo
  2 months ago
감사합니다 :pray:  말씀해 주신 부분들로 인해서 왜 주의해서 구분지어 배워야 할지 감이왔습니다 :smiley:


[강사] 포프
  9:00 AM
aperture란 용어에 대해(주의: 업계 전문용어)
aperture란 용어가 무엇인지 고민 좀 해보셨나요? 아마 이렇다 할 답을 찾지는 못했을 겁니다. (사전 찾아보면 '조리개'라고 나옴)
그 이유는 이게 프린팅 업계에서 사용하는 전문용어이기 때문이죠. 아마 아래 제품을 보는 게 가장 쉽게 이해가 될 겁니다.
https://www.amazon.ca/three-fold-aperture-greetings-cards-White/dp/B00FBDKE48
저 가운데 있는 구멍을 aperture라고 합니다. 또 다른 예는 다음과 같습니다.
https://katysuedesigns.com/collections/card-making/collections_aperture-cards
굳이 정리하자면 사용자가 자유롭게 내용을 삽입할 수 있도록 뚫어놓은 구멍? 사진 프레임을 사면 옆에 테두리는 다 있고 속에 있는 사진만 바꿀 수 있게 구멍을 뚫어놓았잖아요? 그걸 aperture라고 이해하시면 될 것 같습니다.
이제 aperture의 의미도 아셨으니 설계에 좀 더 도움이 되기를... (총총) (edited) 


[강사] 포프
  9:00 AM
올바른 색상(color) 표현법?
학생 분들의 코드를 쭉 보면서 느낀 건데 사실 int로 어떤 색상을 표현하기에는 약간의 문제점이 있습니다. (특히 어떤 학생 분이 색상의 유효성을 검사하기 위해 assert를 0x000000부터 0xFFFFFF까지 모두 넣은 걸 보고 느꼈음 :clap:)
RGB로 색을 표현하는 사람도 있고 BGR로 하는 사람도 있거든요. 심지어는 투명색까지 추가하면 ARGB, RGBA, AGBR 등 다양한 포맷이 나옵니다.
따라서 색상에 좀 더 명확한 type을 사용하도록 빌드봇을 보강해 나갈 계획입니다.


[강사] 포프
  9:00 AM
[힌트] 사진(aperture) 유효성
유효하지 않은 aperture 문제 때문에 고통:anguished:을 받고 있다면 고객의 입장에서 생각해보세요. 특히 가격 산정이 잘못되어서 고객이 화낼 수 있는 경우를요
사용자가 되어서 실제 명함을 만든다고 가정해봅시다. 사진을 추가하고 이리저리 옮길 수 있겠죠. 너비 높이도 바꿀 수 있을 테고요. 그리고 그 일이 끝나면 카트에 더할 겁니다. (참고로 요 카트:shopping_trolley:에 더하는 부분부터가 과제 2입니다)
그 상황에서 이 사진이 유효하지 않은 상태가 어떻게 발생할까요? 이때 가격을 잘못 산정하면 고객이 화낼 경우?


칼퇴왕김야근
 Oct 13th at 4:39 PM
과제에서 RTTI 금지 하신 이유가 있을까요?


[강사] 포프
  3 months ago
저도 한마디 추가하자면... OOP의 4대 원칙 중 하나인 다형성을 쉽게 설명하면
"개체는 니 맘대로 뭐할지 결정혀~"
입니다.
따라서 개체 내부가 아닌 외부에서 "개체 너는 타입이 이거고 그러니 이렇게 해야한다"라고 말하는 건 OOP의 다형성을 어긴다는 것이죠.
그리고 나중에 코드를 추가해나가다 보면 RTTI를 사용 안하면 새로운 자식 클래스만 추가하면 되지만 RTTI를 사용한다면 기존의 코드에 계속 if문을 추가해야해서 몇가지 단점이 있습니다.
기존 코드를 계속 변경한다
어디에 그런 if문이 있는지 몰라서 놓치는 게 있을 수 있다 --> 버그
등


[강사] 포프
  3 months ago
OOP의 원칙이며 뭐며 말이 많지만 결과적으로는 대규모 팀이 알아서 이리저리 분리해서 서로 뭐하는지 모른채도 작업하기 쉬운 환경을 만드는 것이라... 사람들이 이해하기 쉽게 관련된 코드는 한곳에.. 그것도 크지 않은 사이즈로 있는 것이라 협업적으로 이해하면 조금 더 납득하실 수 있지 않을까 조심스레 생각해봅니다.
:bow:
3
:slightly_smiling_face:
3

[POCU 직원] 케로
  4:21 AM
몇몇 분들의 코드를 읽으면서 느낀거지만...
사용자의 실수를 runtime에 잡으려고 assert혹은 exception을 던지는 것 보다 애초에 그런 실수를 할 수 없게 constructor/method signature를 잡아버리는 것이 훨씬 더 좋습니다. 특히 이번 과제에서 특정 제품의 색깔, 종이 종류, 등등은 가능한 값들이 명확히 있기 때문에 이런 부분에서는 runtime check가 거의 필요 없어야 합니다.
함수를 만들 때 만약 사용자의 실수를 runtime에 잡고 있다면 무조건 함수 signature가 올바른지 먼저 의심해 보세요. (물론 runtime에 잡을 수 밖에 없는 상황들도 있긴 합니다만, 제가 본 코드 중에서 그런 상황은 보지 못했습니다) (edited) 


Vice Versa
  3 months ago
잘 읽어보았습니다.
말씀하신게 POCU Java 코딩표준에 있는
21. switch 문에서 default: 케이스가 절대 실행될 일이 없는 경우, default: 안에 assert (false) 란 코드를 추가하거나 예외를 던진다.
이 항목과는 별개의 부분인거지요?
-------------------------------
다시 읽어보니... 이번 과제 상에서는 어차피 매개변수가 잘못 들어올 경우(enum에 미포함된 변수), 생성자/메서드에서 이미 잡아줄 것이므로, (위에 기재한 항목) 이마저도 필요가 없을 것이다
라고 말씀하신걸까요?
그렇다면, 해당 항목에서의 '케이스가 절대 실행될 일이 없는 경우'라는 조건과 상충되는게 아닌가... 하여 헷갈립니다:thinking_face: (edited) 


[POCU 직원] 케로
  3 months ago
말씀하신 21번 항목은 사용자의 실수가 아니고 프로그래머의 실수를 잡아주는 부분입니다. 예를 들어 새로운 enum value를 추가했는데 그것을 처리하는 case를 만들지 않았을 경우. 이런 경우는 런타임에서 잡을 수 밖에 없겠죠.
제가 말한 경우는 예를 들어, 제품의 색깔이 빨강,파랑,초록 밖에 될 수 없는데 생성자에서 아무 색깔이나 받을 수 있게 하는 그런 경우를 말씀드리는 것입니다. 이런 경우:
아무 색깔이나 받은다음 런타임에서 체크를 하면 사용자는 프로그램을 돌려야 자신의 실수를 알지 돌리기전에는 알 수 없음
사용자가 signature를 보고 어떤 색깔이 가능한지 모름. 즉 내부 구현을 열어봐야 어떤 색깔을 넣을 수 있는지 암
(edited)


Vice Versa
  3 months ago
'올바른 함수 signiture로 매개변수를 제한해주는 것이 좋다'라고 말씀하신 것을 제가 당연한 전제로 인식하고 runtime check에 꽂혀서 조금 혼동했었나 봅니다:sweat_smile: 별개의 얘기군요. 이해했습니다 (edited) 
Also sent to the channel


칼퇴왕김야근
  3 months ago
요번 과제의 배너같은 경우,
RGB로 표현 가능한 아무 색상을 추가 할수 있도록 되어 있는데,
이 경우 컬러 생성자에서 invalid한 RGB값인지 체크해서 assert혹은 exception날려야 하지 않나요?


Vice Versa
  3 months ago
배너의 경우는 그렇네요. 여기서 0~255 이외의 값을 넣을 수 없게 제한할 수 있는가? 가 no라면, 강제로 범위 안의 최대 최소로 밀던지, 예외를 던지던지 정도일텐데 말이죠 (저는 전자로 했습니다만, 이게 사용자 입장에서 납득할만한 방법인가 싶긴 합니다) (edited) 


칼퇴왕김야근
  3 months ago
제 생각엔, 생성자에 invalid한 값이 들어왔는데 valid한 값으로 클램핑 하는 경우는 올바르지 않다고 생각되는데,
직원분들께선 assert혹은 exception을 던지지 말라니 어떻게 해야 될지 애매하네요


oakmura
  3 months ago
저는 exception으로 처리해주었습니당. 다른 방법이 있나요? :eyes:
처음에 과제 시작할때는 이 부분이 문제가 될까싶어서, 생성을 담당해주는 주체를 따로만들어서 invalid  한 값이 입력 되었을때 null을 반환하는 방법을 쓰고 싶었는데, 이 방법은 이번 과제에선 막혀있더라구요.
아니면 생성자를 막아두고, null을 반환할수있는 public static method를 통한 개체 생성이였는데, 이것도 과제에서는 막혀있어서리 .. (edited) 


Elroy
  3 months ago
전 invalid한 rgb가 들어오면 그냥 0,0,0으로 바꿔서 생성 해줬습니다. exception을 주는게 제일 좋은것 같네요  (edited) 


Junseok Seo
  3 months ago
그러게요.. 익셉션이 답인건가요? 궁금합니다  생성을 막는방법이 제일 좋은건지..


[조교] 집코더
  3 months ago
이번 배너는 자바 자료형 문제가 있기도 하고...
Color 한정으로는 클램핑이 그리 잘못된 방법이 아닐지도 모른다고 개인적으론 생각합니다. RGB를 표현하는 데 있어서 int로 받아놓고 1바이트로 제한해서 받거나 하는 예가 은근히 보입니다.
.Net core Color 구조체: https://learn.microsoft.com/ko-kr/dotnet/api/system.drawing.color.fromargb?view=net-6.0#system-drawing-color-fromarg[…]32-system-int32-system-int32)
Java Color 클래스: https://docs.oracle.com/javase/8/docs/api/java/awt/Color.html (edited) 
learn.microsoft.comlearn.microsoft.com
Color.FromArgb 메서드 (System.Drawing)
네 개의 8비트 ARGB 구성 요소(알파, 빨강, 녹색 및 파랑) 값으로 Color 구조체를 만듭니다.
:bulb:
2



oakmura
  3 months ago
근데 color 구조체나 클레스에서도 유효하지 않은 255 초과 rgb 값이 들어오면 예외를 던진다고 되어있네용.
자바에서는 피할수 없는 문제인거같기두요..
:+1:
1



[조교] 집코더
  3 months ago
다시 생각해보니 그냥 디버그시에는 assert로 잡고 깨지게 냅두는 게 디버깅할 땐 더 편하긴 하겠군요. 클램핑은 문제를 가려버리니 나중엔 힘들 수도 있으니... 그래도 깨지지 말아야하는 이유가 없으면 예외는 안 쓰는 방향이 낫지 않을까 하긴 합니다.


[조교]Hong
  3 months ago
예외처리는 상황에 따라 달라진다고 생각합니다. DircetX에서 색상 정보를 다룰 때 rgb를 정규화한 값(0~1)을 사용하는데 이 값의 범위가 넘어선다 해서 종료시키거나 예외를 던지지는 않습니다.
실제 작동하는 프로그램이라고 생각하면 사용자가 잘못된 color를 넣었을 때 종료하거나 예외를 던지는 방법보다는 color값을 범위 내로 고정시키는 수정 방식이 더 적합하다고 생각이 듭니다. (255를 넘는 값을 줬다면 그에 준하는 값을 주려는 의도가 있다고 생각)
더 올바르게 하려면 사용자 입력이 잘못되었을 때 다시 입력해달라는 방식으로 예외처리할 수 있겠지만 color에 대해 그렇게 하는 의미가 있을까 생각해보면 이 방식이 꽤나 합리적이라는 생각이 듭니다.


칼퇴왕김야근
  3 months ago
컬러, 중요하지 않나요?
특히 이번과제처럼 웹앰에서 유저가 고른 컬러가 선택이 안되고, 사일런트하게 다른값으로 재설정된 컬러로 주문이 된다면 안될 것 같은데 말이죵..
개인적으론, 배너 컬러 생성시 오류를 인식시켜, 유저한테 다시 입력받는 식이 이번 과제에선 맞는 것 같다고 생각이 드네요.
아마 여기까지 생각해서 기능 구현하라는 큰 뜻이 있는 것 같습니다(?)
:pray:
1



Elroy
  3 months ago
케로님이 남겨주신 메시지의 물론 runtime에 잡을 수 밖에 없는 상황들도 있긴 합니다만, 부분이 이 문제가 아닐까 싶긴 하네요.
개인적인 생각으로는 유저가 아무 값이나 넣어 줄 수 있는 상황에선 올바르지 않은 값이 들어왔을 때
칼퇴왕김야근님이 남겨주신 것 처럼 임의로 값을 재설정 하기보다 Color 클래스 생성자에서 RGB 값이 올바르지 않다면
Exception을 던지고 잘못된 값이라고 유저한테 알리는것도 좋은 방법 같습니다.
꼭 exception을 던지지 않더라도 유저에게 값을 받는 순간에 올바른지 체크하고 유저한테 피드백을 준다면
Color 생성자에 무조건 유효한 값만 들어올 수 있도록 설계 하는 방법도 있겠네요. (edited) 
:pray:
1



[POCU 직원] 케로
  3 months ago
Vice Versa님이 위에 말씀해주신대로 요지는 이겁니다.
올바른 함수 signature로 매개변수를 제한해주는 것이 좋다
이것을 할 수 없다면 assert나 exception을 던지는 것밖에 할 수 없죠 (개인적으로는 assert를 쓰고 애초에 잘못된 값이 못들어오도록 호출자에서 막아버릴 겁니다)
하지만 Stamp같은 경우에:
생성자에 Color를 받는다
생성자 안에서 Color가 빨강/초록/파랑인지 확인한다. 아니라면 assert/exception
이렇게 하면 잘못된 설계죠. 스탬프는 위 세가지 색깔밖에 못 만들고 그것을 표현할 수 있는 열거형이란 훌륭한 type이 있는데 왜 클래스 사용자가 햇갈리게 compile time에 해 줄 수 있는 체크를 runtime에 해주냐는 뜻이였습니다 (edited) 
:bulb:
3



[POCU 직원] 케로
  3 months ago
또 한가지 더하자면 여기서 제가 말한 '사용자'는 여러분들이 만든 클래스를 사용하는 프로그래머지 앱의 사용자가 아닙니다
:slightly_smiling_face:
2



[조교]Hong
  3 months ago
음.. 예외처리에 주관성이 들어갈 수 있다고 생각합니다.
다만 일반 사용자 대상으로 하는 프로그램이더라도 색을 보여주는 방식으로 어떤 색상을 선택했는지 보여줄 수 있으므로 입력창에서 수를 더 못 올라가게 하거나(이것도 어찌보면 클램핑) 입력을 받고 클램핑 시키는 방식도 꽤나 일반적으로 사용된다고 생각합니다.
해당 부분은 저도 아직 경험이 부족하여 강의에서 예외처리 관련된 부분 참고하시면 좋을 듯합니다. (edited) 







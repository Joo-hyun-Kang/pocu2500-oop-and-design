
brotho
 Oct 11th, 2022 at 7:23 AM
실습을 하면서, 그리고 많은 분들의 코드를 보면서 궁금한게 생겨서 여쭤봅니다.
rest함수 호출 시 hp와 스킬의 count를 늘려주고,
hp > maxHP 이면 maxHP로 맞춰주는 일
count > maxCount 이면 maxCount로 맞춰주는 일
이 두개를 어떤 분들은 rest 함수 안에서 하고,
어떤 분들은 addHp, addCount 라는 함수를 만들어서 그 안에서 처리해주고,
어떤 분들은 하나는 rest함수에서, 하나는 addCount라는 함수 안에서 처리해주시고,..
이렇게 다양한데 이런것이 기준이 있나요??
문득 보면, maxHp를 넘어가는지에 대한 처리는 rest함수 안에서 하고,
skill의 카운트가 넘어가는지는 별도의 메서드를 만들어서 그 안에서 처리를 하시는 분들이 제일 많은 것 같아요.
어떤 함수가 어디까지 책임을 져야하는지를 잘 모르겠어요 ………:smiling_face_with_tear:
9 replies


oakmura
  3 months ago
public void rest() {
    this.hp = Math.min(this.maxHp, this.hp + 10);
    for (Move move : this.moves) {
        move.incrementPowerPoint();
    }
}
저는 rest()를 이렇게 작성했습니다! 제 코드가 맞다는 것은 아니지만 위와 같이 코드를 작성한 제 생각을 말씀드리자면,
굳이 최대 hp임을 체크하는 로직을 한줄로 간단히 작성 가능한데 별도의 도우미 매서드를 만들 필요는 없다고 생각합니다!
나중에 글래디에이터 클래스가 확장돼서 따로 최대 체력임을 체크하는 로직을 사용하는 곳이 클래스에 많아진다면 그때는 별도의 최대 체력을 검증하는 도우미 함수를 만들어서 재사용성을 늘려주는 것도 방법이라고는 생각합니다.
2. 스킬 포인트를 증가시켜주는건, '스킬'은 별도의 클래스이기떄문에 그 클래스 개체가 스스로의 상태를 올바르게 유지할 '책임'이 있다고생각합니다. 그래서 Gladiator 클래스에서 난 지금 '휴식을 취했으니까' 스킬 포인트를 증가시켜줘! 하고 함수를 호출해줄순 있지만, 실제로 그 스킬 포인트를 증가 시켜줄지는 Move 클래스에서 스킬 포인트를 올려주는 것이 유효한 연산인지를 (자신의 상태를 유효하지 않게 바꾸는 것은 아닌지는) 확인하고 올려줘야한다고 생각합니다.


brotho
  3 months ago
클래스 하나는 독립적으로 책임을 갖도록 하셨군요. 저는 1.a.를 염두해서 둘 다 별도의 함수에서 처리를 했는데, 다른 분들의 의도가 궁금하더군요. 말씀 감사합니다


oakmura
  3 months ago
둘다 맞는 방법인것같습니다! 근데 실제 PocuSoft를 저희가 개발하는 입장이라면, 현재 자신이 풀피인지를 확인할 일이 자주 있을수도 있으므로 brotho님의 방법이 더 맞는 것 같네용.


코드왕
  3 months ago
결국 정해진 정답은 없고 "용도에 맞게.." "상황에 따라.." 코드를 작성하는 것이 그나마 정답에 가깝다는 생각이 들긴하네요. 저같은 경우 hp에 관련된 건 changeHp라는 메서드에서 따로 통합적으로 관리하였는데요 이걸 만든 이유는 다음과 같습니다. (여기서부터는 제 경험에 의한 주관적인 내용이 나오니 다양한 케이스 중에 하나라고 생각해주시면 감사하겠습니다.)
hp변화로 인한 여러가지 변화를 코드 한 곳에서 유지, 보수 하기 위함
예를들어 hp가 변했을때 캐릭터에게 공통적으로 변화하는 부분이 있다면 "체력바의 변화"가 있을 수 있고 추가적으로 "체력 증가 효과음 발생" "캐릭터가 팔을 들고 기뻐하는 움직임을 취함" 이런 것들도 있을 거 같은데요. 각각 updateHealthBar(), playAudio(), setAnimation()을 통해서 이를 구현한다면 changeHp를 따로 구현하지 않았을땐 hp가 변화하는 코드들을 일일히 다 찾아가서 위 메서드들을 추가해줘야 해서 번거로워 지더군요. 만약 이런 캐릭터들이 수십개라면 유지, 보수하기 힘들어지고 인간이라면 실수할 확률이 커질 것 같습니다. 또 만약 개발 중에 체력이 줄어들면 화면이 깜박이는 기능을 추가하게 된다면 또 일일히 찾아가서 코드를 추가해줘야하니 힘들어질 거 같네요.
:bulb:
3
:pray:
1



칼퇴왕김야근
  3 months ago
어느 함수가 책임을 어디까지 져야하는지는,
포프님 강의에 나온것처럼 주관적해석이 가능하기에 어려운 것 같아요.
제가 자주 쓰는 방법은, 함수를 한 문장으로 표현해보고,
다음과 같은 조건에 하나라도 부합된다면,
여러가지 책임을 지고 있다고 생각하고 함수를 나누는 방식으로 하고 있습니다.
1. 여러가지 다른 개념을 한번에 말하고 있거나.
2. 문장 단어수가 생각보다 많아지거나.


칼퇴왕김야근
  3 months ago
예를 들어, 이번에 휴식하는 함수를 한문장으로 표현해보면,
‘HP를 회복하고, 파워포인트를 충전하라’ 가 될텐데,
HP와 파워포인트라는, 서로 다른 개념을 말하고 있다고 생각이 드신다면,
함수를 분리하는 것도 좋은 방법이 될 것 같네요.


칼퇴왕김야근
  3 months ago
저 같은 경우는, 두개 다 다른 함수로 쪼개고, rest함수는 각 함수를 부르는 역할로 구현했습니다.
    public void rest() {
        if (!isRestable()) {
            return;
        }
        recoveryHp();
        moves.increaseAllPowerPoints();
    }
:heart:
1



[조교]Hong
  3 months ago
저도 가볍게 의견남깁니다.
함수를 만드는 일은 포인터를 통해 원본을 재사용하듯 원본 로직을 두고 재사용하기 위해 만드는 거라 생각합니다.
그렇기에 저는 중복로직이 있는 게 아니면 웬만해서는 함수 분리를 안 하는 편입니다.
그러는 이유
디버깅 시 위에서 쭉 읽으니 편하다.
여러 개로 나눌 시 증복 로직이라 생각하고 분리했는데 중복이 아닐 경우 이미 참고하고 있는 로직들 때문에 수정이 어렵다. (유지보수 대상이 늘어나는 느낌)
C++의 경우 header가 깔끔해진다..?
(edited)


[조교]Hong
  3 months ago
코드왕님 말씀처럼 나름의 이유가 있다면 상황에 맞게가 제일 좋은 방향인 거 같긴 합니다.
:heart:
1


[강사] 포프
  9:00 AM
과제 1을 잘 진행하고 계신가요? COMP2500의 과제는 생각보다 시간이 많이 걸리니 일찍 시작하시길 바라며, 방향을 잡는데 도움이 될만한 팁들을 좀 공유하겠습니다. :partying_face:
I. 과제의 의도
프로그래머는 자주 하는 실수 중에 하나가 '난 아주 잘 정의된 기능 명세서를 구현만 하면 돼!'입니다. 물론 그럴 때도 있긴 하지만 실무에서는 그러지 않을 때가 더 많죠.
'COMP2500: 개체지향 설계 및 프로그래밍'은 실무(즉, '그러지 않은 경우')에 더 초점을 맞춘 과목입니다. 이런 경우 프로그래머가 설계도 같이 진행할 수밖에 없죠.
그 설계능력을 키워드리기 위해 COMP2500은 과제를 이렇게 구성했습니다.
과제에 등장하는 배우 목록
* :office_worker: 고객(과제 명세서): 프로그래밍을 잘 알지 못함
* :technologist: 주니어 프로그래머(수강생, 바로 당신): 탑 프로그래머가 되려고 노.력. 중
* :rage: 사수 프로그래머(빌드봇): 주니어 프로그래머의 코드 리뷰를 봐줌. 어디가 잘못된 지만 말해주고 30분간 잠적하는 츤데레 바쁜 사람
* :dancers: 동료들(학우들): 같은 시기에 입사한 주니어 프로그래머들. 사수 때문에 멘탈이 깨질 때마다 서로 으쌰 으쌰 하며 힐링 마법을 시전
일반적인 과제 진행 방법
1. 고객(:office_worker:)이 기능 또는 제품을 요청 (다행히 실무보다는 훨씬 간단한 수준의 요구사항)
2. 주니어 프로그래머(:technologist:)가 요구사항을 올바르게 해석한 뒤, 실무에서 괜찮게 생각하는 방법으로 설계/구현하려 노.력.
3. 사수(:rage:)가 주니어 프로그래머의 구현 및 설계를 보고 어디 가 잘못되었는지 알려줌 (기능과 설계에 대한 피드백은 별도. 잘 작동해도 설계가 틀리면 뭐라(?) 함. 협업을 방해하는 변수/함수 명도 까탈스럽게 잡음)
4. 사수의 피드백을 들은 프로그래머가 무엇 이 잘못되었는지를 잘 찾아내서 고치려고 노력
5. 여전히 사수에게 너무 혼나서 멘탈이 나가면 동료들(:dancers:)과 슬랙 방에서 커피 한 잔 하며 토론하다가 방법을 찾음
6. (:infinity: 무한반복)
II. 과제 명세서가 너무 추상적으로 느껴진다면?
혹시라도 과제 명세서가 구체적이지 않고 추상적이라 느끼신다면 이 부분을 읽어주세요.
* 과제 명세서에서 클래스 하고 메서드 이름을 알려주지 않아서 타 과목의 과제/실습보다 추상적으로 느끼실 수 있습니다.
* 하지만 프로그래밍 명세가 아닌 비즈니스 로직 쪽의 스펙은 타 과목의 과제/실습보다 구체적입니다.
* 실무에서 제품 책임자(PO) 등에게 받는 스펙은 이보다 더 뜬구름입니다 ㅠ_ㅠ
* 예: 한 줄짜리 스펙. '블로그를 만들어주세요'
    * 실제 제품 책임자는 어떤 기능이 필요한지 잘 이해 못 합니다.
    * 유명한 블로그 플랫폼들도 약간씩 기능이 다르고, 그렇게 달라지는 이유가 있는데 그걸 모두 자세히 이해하는 사람은 드뭅니다.
    * 따라서 만들어가면서 모르는 걸 찾아내고, 그걸 기반으로 더 좋게 만드는 과정을 반복하는 게 개발입니다.
따라서 이렇게 진행하세요.
1. 주관적인 내용에 대해 탐구 및 수정 작업을 거친다.
2. 본인이 그나마 논리적으로 생각하는 방향, 혹은 다른 블로그 시스템에서 주로 사용하는 방법을 찾아서 그렇게 구현한다.
3. 제출 시 빌드봇이 틀렸다 하는 부분에 대해 다시 고민해본다. :infinity:
III. '메서드 등록'에 대해
여러분이 만든 클래스와 메서드가 본인 컴퓨터에서 완벽하게 작동하고 있죠? :grinning: 하지만 빌드봇은 정확히 어떤 클래스의 어느 메서드가 무슨 역할을 하는지 완벽히 알지 못합니다. 그걸 알려주기 위해 메서드 등록을 해주셔야 해요.
예를 하나 들어가며 메서드 등록법에 대해 배워보겠습니다. 다음과 같은 메서드가 있다고 합시다.
태그 필터를 설정하는 메서드(tag filter setter) 예
* 클래스 이름: A
* 메서드 이름: setB()
그러면 Registry 에 있는 registerTagFilterSetter()를 호출하면서 "A" 와 "setB" 를 인자로 넣어주면, 이제 빌드봇이 태그 필터를 테스트할 때마다 이 메서드를 호출합니다.
IV. 빌드봇이 알려주는 테스트 결과를 이해하기 어렵다면?
여러 개체들끼리 서로 통신을 하는 OOP에서 뭐가 하나 제대로 작동 안 하면 정확히 어디가 문제인지 판단이 어려워지는 일이 흔합니다. 단순히 함수 하나 테스트하는 게 아니니까요.
또한 과제 따라 다르지만 빌드봇이 허용하는 구현의 조합은 10,000개를 넘는 경우도 있어서 A의 설계를 고치려다가 원래 문제가 없었던 B, C, D의 설계를 망가트리는 경우도 있습니다.
다음의 팁을 따라 빌드봇이 보고한 문제를 고쳐보세요.
1. 빌드봇의 테스트 실패 메시지를 이해하기 어렵다면 COMP2500 위키 페이지를 본다
    * 특히 위키 홈에 여러 실패 메시지에 대한 설명이 있습니다.
1. 상식에 어긋남(non sensible)이란 메시지는 보통 설계 상의 문제를 의미한다
1. 허용되지 않은 매개변수 이름을 사용했다는 오류가 나오면 이걸 우선적으로 고친다
    * 허용되지 않은 매개변수를 사용하면 자동적으로 0점입니다.
1. 실패한 테스트를 순서대로 고친다
    * 저희 테스트는 최대한 순서대로 만들어 놨습니다.
    * 따라서 앞의 테스트를 고치지 않으면 뒤의 테스트가 제대로 동작하지 않을 가능성이 높습니다. (예: 실패한 테스트가 A02, B00, B02일 때, A02를 고치지 않으면 B00, B02는 계속 실패하는 경우가 많음)
    * 혹시라도 과제 중에 이런 순서가 제대로 지켜지지 않는 것이 있다면 알려주세요. 검토 후 고치도록 하겠습니다.
그럼 이 글이 많은 분들에게 도움이 되었길 바라며... 총총총... :man-cartwheeling:

[강사] 포프
  9:00 AM
사용자(유저)의 표현법?
수강생분들이 택한 여러 가지 유저 설계를 보고 유용하겠다 싶어 이 글을 씁니다.
1. 유저 설계에서 가장 중요한 것은 각 사용자를 식별하는 고유한(unique) 값이 있어야 한다는 겁니다. (고유 식별자)
    * 서로 다른 유저의 고유 식별자가 동일하면 안 됩니다.
    * 같은 유저인데 실행할 때마다 식별자가 바뀌면 안 됩니다.
    * 고유 식별자로 사용할 수 있는 데이터와 데이터형은 몇 가지 됩니다.
2. 블로그에서 유저를 생성하려면 어떤 정보가 필요한가요?
    * 어떤 정보를 사용하든 간에 최소 그중 하나는 고유 식별자여야 합니다.
    * 시스템에 따라 고유 식별자 그 자체가 유저가 될 수도 있습니다.
3. 유저를 클래스로 만든다면 다음의 것들도 고려해보세요.
    * 코드에서 유저의 고유 식별자를 생성하는 위치가 어디어야 할까요?
    * 어떤 메서드에 유저 정보를 전달할 때 어떤 형태로 전달하는 게 "올바른" OOP일까요?

[강사] 포프
  9:00 AM
[타사 제품 리서치] 블로그 주인이 아닌 사용자(유저)가 블로그 글을 게재할 수 있는가?
이것도 수강생분들의 여러 가지 설계/구현 방법을 검토하다가 알려드리면 좋을 것 같은 내용이 있어서 공유합니다.
일단 이런 질문에 대한 답을 찾는 가장 좋은 방법은 타제품을 베끼는 리서치하는 겁니다. :face_with_hand_over_mouth:
1. 아마 흔히들 사용하시는 네*버 블로그는 주인 외에 다른 사람이 글을 게재할 수 없을 겁니다.
2. 티스토리에는 여러 명의 유저가 글을 쓸 수 있는 팀블로그란 기능이 있습니다.
3. 역시 구글 블로거에도 팀블로그란 기능이 있습니다.
4. 회사 자체에서 운영하는 블로그도 보통 여러 명의 직원들이 글을 올립니다. (예: 마이크로소프트 사의 블로그)
따라서 충분히 블로그 주인이 아닌 유저가 블로그 글을 게재할 수 있습니다.
실무에서 팀블로그를 구성할 때는 특정 유저들을 초대해서 작성자 권한을 줍니다. 그리고 누군가 글을 쓰려고 할 때마다 그 사람이 권한이 있는지 확인하겠죠. 하지만 이 과제에서는 권한을 체크하는 코드까지 요구하지는 않습니다.
:+1:
6

[힌트] 필터링에 대해
이미 아시겠지만 빌드봇은 여러 가지 블로그 글 목록 필터링 방법을 허용합니다. (설계 중심의 과목이기 때문에 딱 한 가지 방법을 강요하지는 않음)
빌드봇이 허용하는 방법들은 모두 실무에서 충분히 볼 수 있는 방법들이지만 그중에서도 그다지 훌륭하지 않은 설계들도 있습니다. 다음의 것들을 고민해보면 더 훌륭한 설계를 찾을 수 있지 않을까요?
1. 복수의 태그 필터를 적용할 때, 어떻게 적용하는 것이 더 자연스러울까?
   * addTag() 메서드를 통해 한 개씩 추가
   * setTags() 메서드를 통해 모든 태그를 한 번에 설정
2. 다른 프로그래머가 filter setter 메서드 시그내처를 보고 단번에 '아, unset도 가능하겠구나'라고 알 수 있을까?
고민해보시면 더 나은 방법이 보일 겁니다. :blush:

[강사] 포프
  9:00 AM
[아마도 마지막 힌트] 댓글(Comment)과 하위 댓글(Subcomment)
댓글 및 하위 댓글 설계를 시도하다가 아직 깨달음의 순간(Eureka moment :bath:)을 못 겪으신 분들을 위한 두 가지 팁입니다. 둘 다 일반화(따라서 재사용성)와 관련이 있습니다.
I. 누가 누구를 참조해야 하는가?
'상위 댓글 vs 하위 댓글' 개념에서 더 나아가서 '대대댓글', '대대대댓글'을 지원하려면 누가 누구를 참조해야 할까요? (A가 B를 참조한단 의미는 A 개체 내부에 B 개체를 저장한다는 말)
1. 상위 댓글이 하위 댓글을 참조 (상위 --> 하위)
2. 하위 댓글이 상위 댓글을 참조 (하위 --> 상위)
3. 서로서로 사이좋게 참조 (상위 <-> 하위)
이 중에 한 가지 방법은 정말 불필요하고 나쁩니다. :imp: 나머지 둘은 모두 나쁘지 않은 방법인데, 그중 특히 한 가지 방법을 택하면 재사용성을 확실히 높일 수 있습니다. :innocent:
II. 댓글 설계의 일반화 정도
이건 아마 거의 정답을 알려드릴 것 같네요. :stuck_out_tongue_winking_eye:
과제 1의 사용자 스토리를 보면 댓글과 하위 댓글을 구분해서 설명하고 있습니다. 이것을 그대로 설계로 옮기면 다음과 같을 겁니다.
1. '나는 Post 클래스. 나에게 달리는 댓글은 Comment 클래스'
2. '나는 Comment 클래스. 나에게 달리는 댓글은 Subcomment 클래스'
처음에는 이 설계가 괜찮아 보이지만 다음과 같은 여러 의문들이 남습니다.
1. '그럼 Subcomment 클래스에 달리는 댓글은 Subsubcomment 클래스로 만들어야 하나?'
2. (위의 I. 누가 누구를 참조해야 하는가? 에서 올바른 결정을 내렸다면) 'Post 클래스에 달리는 댓글이든 Comment에 달리는 댓글이든 그 클래스 속에 들어가는 데이터가 달라지나?'
이 정도면 충분히 팁을 드린 것 같죠? :blush:


Qwer Asdf
 Oct 6th at 11:21 PM
https://comp2500-202209-ko.slack.com/archives/C03TYEV7QAW/p1663718400866589 에서 말씀하셨던 '불필요하고 나쁜 방법'과 '재사용성을 높일 수 있는 방법'이 어떤 것인지 궁금합니다.


[강사] 포프
[아마도 마지막 힌트] 댓글(Comment)과 하위 댓글(Subcomment)
댓글 및 하위 댓글 설계를 시도하다가 아직 깨달음의 순간(Eureka moment :bath:)을 못 겪으신 분들을 위한 두 가지 팁입니다. 둘 다 일반화(따라서 재사용성)와 관련이 있습니다.
I. 누가 누구를 참조해야 하는가?
Show more
Posted in assignment1 | Sep 21st | View message
1 reply


[강사] 포프
  3 months ago
3. 나쁜 방법
1. 재사용성이 높아지는 방법
:pray:
1


